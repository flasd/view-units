{"version":3,"sources":["src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["// /* eslint-disable no-use-before-define */\n/*!\n * @license MIT\n * @preserve\n *\n * vUnit.js: A vanilla JS alternative for vh and vw CSS units.\n * Version: 0.2.0\n * https://github.com/joaocunha/v-unit/\n *\n * @author JoÃ£o Cunha - joao@joaocunha.net - twitter.com/joaocunha\n */\nexport default function vUnit(options) {\n  if (!window || !document) {\n    return;\n  }\n\n  // Just an alias for easier readability (and to preserve `this` context)\n  const vunit = this;\n\n  // For extending the options\n  const opts = options || {};\n\n  vunit.options = {\n    // The ID for the appended stylesheet\n    stylesheetId: opts.stylesheetId || 'v-unit-stylesheet',\n\n    // The interval between each check in miliseconds\n    viewportObserverInterval: opts.viewportObserverInterval || 100,\n\n    // The CSS rules to be vUnit'd\n    CSSMap: opts.CSSMap || null,\n\n    // onResize callback\n    onResize: opts.onResize || (() => { }),\n  };\n\n  // Stores the viewport dimensions so the observer can check against it and update it.\n  vunit.viewportSize = {\n    height: 0,\n    width: 0,\n  };\n\n  /**\n   * @function createStylesheet\n   * Creates an empty stylesheet that will hold the v-unit rules.\n   *\n   * @returns {HTMLStyleElement} An empty stylesheet element.\n   */\n  function createStylesheet() {\n    const stylesheet = document.createElement('style');\n\n    stylesheet.setAttribute('rel', 'stylesheet');\n    stylesheet.setAttribute('type', 'text/css');\n    stylesheet.setAttribute('media', 'screen');\n    stylesheet.setAttribute('id', vunit.options.stylesheetId);\n\n    return stylesheet;\n  }\n\n  /**\n   * @function createCSSRules\n   * Create CSS rules based on the viewport dimensions.\n   *\n   * It loops through a map of CSS properties and creates rules ranging from 1 to 100 percent\n   * of its size.\n   *\n   * We used to Math.round() the values, but then we can't stack two .vw50 elements side by\n   * side on odd viewport widths. If we use Math.floor, we end up with a 1px gap. On the other\n   * hand, if we use pixel decimals (no round or floor), the browsers ajusts the width\n   * properly.\n   *\n   * Example:\n   * .vw1   {width: 20px;}\n   * .vw2   {width: 40px;}\n   *         ...\n   * .vw100 {width: 2000px;}\n   * .vh1   {height: 5px;}\n   * .vh2   {height: 10px;}\n   *         ...\n   * .vh100 {height: 500px;}\n   *\n   * @returns {String} The concatenated CSS rules in string format.\n   */\n  function createCSSRules() {\n    const computedHeight = (vunit.viewportSize.height / 100);\n    const computedWidth = (vunit.viewportSize.width / 100);\n    const vmin = Math.min(computedWidth, computedHeight);\n    const vmax = Math.max(computedWidth, computedHeight);\n    const map = vunit.options.CSSMap;\n    let CSSRules = '';\n    let value = 0;\n\n    // Loop through all selectors passed on the CSSMap option\n    Object.keys(map).forEach((selector) => {\n      const { property } = map[selector];\n\n      // Adds rules from className1 to className100 to the stylesheet\n      for (let range = 1; range <= 100; range += 1) {\n        // Checks what to base the value on (viewport width/height or vmin/vmax)\n        switch (map[selector].reference) {\n          case 'vw':\n            value = computedWidth * range;\n            break;\n          case 'vh':\n            value = computedHeight * range;\n            break;\n          case 'vmin':\n            value = vmin * range;\n            break;\n          case 'vmax':\n            value = vmax * range;\n            break;\n\n          default:\n            value = 0;\n        }\n\n        // Barebones templating syntax\n        const CSSRuleTemplate = '_SELECTOR__RANGE_{_PROPERTY_:_VALUE_px}\\n';\n\n        CSSRules += CSSRuleTemplate.replace('_SELECTOR_', selector)\n          .replace('_RANGE_', range)\n          .replace('_PROPERTY_', property)\n          .replace('_VALUE_', value);\n      }\n    });\n\n    return CSSRules;\n  }\n\n  /**\n   * @function appendCSSRulesToStylesheet\n   * Appends the created CSS rules (string) to the empty stylesheet.\n   *\n   * @param {String} CSSRules A string containing all the calculated CSS rules.\n   * @param {HTMLStyleElement} stylesheet An empty stylesheet object to hold the rules.\n   */\n  function appendCSSRulesToStylesheet(CSSRules, stylesheet) {\n    // IE < 8 checking\n    if (stylesheet.styleSheet) {\n      // eslint-disable-next-line no-param-reassign\n      stylesheet.styleSheet.cssText = CSSRules;\n    } else {\n      stylesheet.appendChild(document.createTextNode(CSSRules));\n    }\n  }\n\n  /**\n   * @function appendStylesheetOnHead\n   * Appends the stylesheet to the <head> element once the CSS rules are created.\n   *\n   * @param {HTMLStyleElement} stylesheet A populated stylesheet object.\n   */\n  function appendStylesheetOnHead(stylesheet) {\n    // Borrowed head detection from restyle.js - thanks, Andrea!\n    // https://github.com/WebReflection/restyle/blob/master/src/restyle.js\n    const head = document.head || document.getElementsByTagName('head')[0] || document.documentElement;\n\n    // Grabs the previous stylesheet\n    const legacyStylesheet = document.getElementById(vunit.options.stylesheetId);\n\n    // Removes the previous stylesheet from the head, if any\n    if (legacyStylesheet) {\n      head.removeChild(legacyStylesheet);\n    }\n\n    // Add the new stylesheet to the head\n    head.appendChild(stylesheet);\n  }\n\n  /**\n   * @function calculateViewportSize\n   * Calculates the size of the viewport.\n   *\n   * @returns {Object} An object containing the dimensions of the viewport.\n   *\n   * Example:\n   * return {\n   *     width: 768,\n   *     height: 1024\n   * }\n   */\n  function calculateViewportSize() {\n    const viewportSize = {\n      height: document.documentElement.clientHeight,\n      width: document.documentElement.clientWidth,\n    };\n\n    return viewportSize;\n  }\n\n  /**\n   * @function viewportHasChanged\n   * Checks if the viewport dimensions have changed since the last checking.\n   *\n   * This checking is very inexpensive, so it allows to regenerate the CSS rules only when\n   * it's needed.\n   *\n   * @returns {Boolean} Wether the dimensions changed or not.\n   */\n  function viewportHasChanged() {\n    const currentViewportSize = calculateViewportSize();\n    const differentHeight = (currentViewportSize.height !== vunit.viewportSize.height);\n    const differentWidth = (currentViewportSize.width !== vunit.viewportSize.width);\n\n    // Updates the global letiable for future checking\n    vunit.viewportSize = currentViewportSize;\n\n    return (differentHeight || differentWidth);\n  }\n\n  function viewportObserver() {\n    if (viewportHasChanged()) {\n      const stylesheet = createStylesheet();\n      const CSSRules = createCSSRules();\n\n      appendCSSRulesToStylesheet(CSSRules, stylesheet);\n      appendStylesheetOnHead(stylesheet);\n      vunit.options.onResize(vunit.viewportSize);\n    }\n  }\n\n  viewportObserver();\n\n  window.setInterval(\n    () => requestAnimationFrame(viewportObserver),\n    vunit.options.viewportObserverInterval,\n  );\n}\n\nvUnit({\n  CSSMap: {\n    '.vh': {\n      property: 'height',\n      reference: 'vh',\n    },\n    '.vw': {\n      property: 'width',\n      reference: 'vw',\n    },\n  },\n});\n"]}